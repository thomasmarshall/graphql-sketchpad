{"version":3,"sources":["sketchpad.ts","webpack:///./src/sketchpad.ts?1e74","App.tsx","index.tsx"],"names":["module","exports","wrap","__esModule","Worker","initialTypeDefs","outdent","initialQuery","initialMocks","App","useState","typeDefs","setTypeDefs","query","setQuery","mocks","setMocks","result","setResult","useEffect","data","string","window","location","hash","slice","JSON","parse","atob","err","object","execute","then","replace","btoa","stringify","className","options","screenReaderLabel","mode","lineNumbers","value","onBeforeChange","editor","name","json","readOnly","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gHAAAA,EAAOC,QAAU,EAAQ,IAAWC,KAAK,EAAQ,GAAR,IAA+SF,EAAOC,QAAQE,YAAa,G,wCCApXH,EAAOC,QAAU,WACf,OAAO,IAAIG,OAAO,IAA0B,oC,04BCS9C,IAAMC,EAAkBC,YAAH,KAiBfC,EAAeD,YAAH,KAaZE,EAAeF,YAAH,KA+EHG,EAhEH,WAAO,IAAD,EACgBC,mBAASL,GADzB,mBACTM,EADS,KACCC,EADD,OAEUF,mBAASH,GAFnB,mBAETM,EAFS,KAEFC,EAFE,OAGUJ,mBAASF,GAHnB,mBAGTO,EAHS,KAGFC,EAHE,OAIYN,mBAAS,IAJrB,mBAITO,EAJS,KAIDC,EAJC,KAqBhB,OAfAC,qBAAU,WACR,IACE,IAAMC,GAVgBC,EAUGC,OAAOC,SAASC,KAAKC,MAAM,GAVXC,KAAKC,MAAMC,KAAKP,KAYzDT,EAAYQ,EAAKT,UACjBG,EAASM,EAAKP,OACdG,EAASI,EAAKL,OACd,MAAOc,IAfc,IAACR,IAgBvB,IAEHF,qBAAU,WAnBa,IAACW,EAoBtBC,kBAAQ,CAAEpB,WAAUE,QAAOE,UAASiB,KAAKd,GACzCI,OAAOC,SAASU,QAAQ,KArBFH,EAqBkB,CAAEnB,WAAUE,QAAOE,SArBlBmB,KAAKR,KAAKS,UAAUL,QAsB5D,CAACnB,EAAUE,EAAOE,IAGnB,sBAAKqB,UAAU,gBAAf,UACE,cAAC,aAAD,CACEC,QAAS,CACPC,kBAAmB,SACnBC,KAAM,UACNC,aAAa,GAEfC,MAAO9B,EACP+B,eAAgB,SAACC,EAAQvB,EAAMqB,GAAf,OAAyB7B,EAAY6B,MAEvD,cAAC,aAAD,CACEJ,QAAS,CACPC,kBAAmB,QACnBC,KAAM,UACNC,aAAa,GAEfC,MAAO5B,EACP6B,eAAgB,SAACC,EAAQvB,EAAMqB,GAAf,OAAyB3B,EAAS2B,MAEpD,cAAC,aAAD,CACEJ,QAAS,CACPC,kBAAmB,QACnBC,KAAM,aACNC,aAAa,GAEfC,MAAO1B,EACP2B,eAAgB,SAACC,EAAQvB,EAAMqB,GAAf,OAAyBzB,EAASyB,MAEpD,cAAC,aAAD,CACEJ,QAAS,CACPC,kBAAmB,SACnBC,KAAM,CAAEK,KAAM,aAAcC,MAAM,GAClCL,aAAa,EACbM,UAAU,GAEZL,MAAOxB,EACPyB,eAAgB,kBAAM,YC5G9BK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c84c02fe.chunk.js","sourcesContent":["module.exports = require('comlink').wrap(require(\"!worker-loader?{}!/Users/tom/Projects/graphql-sketchpad/node_modules/comlink-loader/dist/comlink-worker-loader.js!/Users/tom/Projects/graphql-sketchpad/node_modules/react-scripts/node_modules/babel-loader/lib/index.js??ref--5-oneOf-2!/Users/tom/Projects/graphql-sketchpad/src/sketchpad.ts\")());module.exports.__esModule = true;","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"4b8e16b9b9f8f7ccf0f9.worker.js\");\n};","import React, { useEffect, useState } from \"react\";\nimport outdent from \"outdent\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror-graphql/mode\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport { execute } from \"comlink-loader?singleton=true!./sketchpad\";\nimport \"./App.css\";\n\nconst initialTypeDefs = outdent`\n  type Query {\n    example: String!\n    users: [User!]!\n  }\n\n  type User {\n    name: String!\n    email: String!\n    comments: [Comment!]!\n  }\n\n  type Comment {\n    body: String!\n  }\n`;\n\nconst initialQuery = outdent`\n  query {\n    example\n    users {\n      name\n      email\n      comments {\n        body\n      }\n    }\n  }\n`;\n\nconst initialMocks = outdent`\n  const mocks = {\n    Query: () => ({\n      example: () => faker.random.words(2),\n    }),\n    User: () => ({\n      name: () => \"Alex Smith\",\n      email: () => \"alex.smith@example.com\",\n    }),\n  };\n`;\n\nexport const serialize = (object: Object) => btoa(JSON.stringify(object));\nexport const deserialize = (string: string) => JSON.parse(atob(string));\n\nconst App = () => {\n  const [typeDefs, setTypeDefs] = useState(initialTypeDefs);\n  const [query, setQuery] = useState(initialQuery);\n  const [mocks, setMocks] = useState(initialMocks);\n  const [result, setResult] = useState(\"\");\n\n  useEffect(() => {\n    try {\n      const data = deserialize(window.location.hash.slice(1));\n\n      setTypeDefs(data.typeDefs);\n      setQuery(data.query);\n      setMocks(data.mocks);\n    } catch (err) {}\n  }, []);\n\n  useEffect(() => {\n    execute({ typeDefs, query, mocks }).then(setResult);\n    window.location.replace(\"#\" + serialize({ typeDefs, query, mocks }));\n  }, [typeDefs, query, mocks]);\n\n  return (\n    <div className=\"App-sketchpad\">\n      <CodeMirror\n        options={{\n          screenReaderLabel: \"Schema\",\n          mode: \"graphql\",\n          lineNumbers: true,\n        }}\n        value={typeDefs}\n        onBeforeChange={(editor, data, value) => setTypeDefs(value)}\n      />\n      <CodeMirror\n        options={{\n          screenReaderLabel: \"Query\",\n          mode: \"graphql\",\n          lineNumbers: true,\n        }}\n        value={query}\n        onBeforeChange={(editor, data, value) => setQuery(value)}\n      />\n      <CodeMirror\n        options={{\n          screenReaderLabel: \"Mocks\",\n          mode: \"javascript\",\n          lineNumbers: true,\n        }}\n        value={mocks}\n        onBeforeChange={(editor, data, value) => setMocks(value)}\n      />\n      <CodeMirror\n        options={{\n          screenReaderLabel: \"Result\",\n          mode: { name: \"javascript\", json: true },\n          lineNumbers: true,\n          readOnly: true,\n        }}\n        value={result}\n        onBeforeChange={() => null}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}