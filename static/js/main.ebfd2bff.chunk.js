(this["webpackJsonpgraphql-sketchpad"]=this["webpackJsonpgraphql-sketchpad"]||[]).push([[0],{11:function(e,n,t){e.exports=t(25).wrap(t(23)()),e.exports.__esModule=!0},17:function(e,n,t){},23:function(e,n,t){e.exports=function(){return new Worker(t.p+"d00f5512163fab7d04d5.worker.js")}},24:function(e,n,t){},27:function(e,n,t){"use strict";t.r(n);var r=t(2),a=t(0),o=t.n(a),s=t(10),c=t.n(s),u=(t(17),t(1)),i=t(6),l=t(7),m=t(5),p=(t(20),t(21),t(22),t(11));t(24);function b(){var e=Object(i.a)(['\n  // Add custom mock resolvers\n\n  const mocks = {\n    Query: () => ({\n      example: () => faker.random.words(2),\n      users: () => new MockList(4),\n    }),\n    User: () => ({\n      name: () => "Alex Smith",\n      email: () => "alex.smith@example.com",\n    }),\n  };\n']);return b=function(){return e},e}function d(){var e=Object(i.a)(["\n  # Perform queries/mutations against the schema\n\n  query {\n    example\n    users {\n      name\n      email\n      comments {\n        body\n      }\n    }\n  }\n"]);return d=function(){return e},e}function h(){var e=Object(i.a)(["\n  # GraphQL Sketchpad is a tool for quickly sketching out GraphQL APIs\n  # https://github.com/thomasmarshall/graphql-sketchpad\n\n  # Design your schema here\n\n  type Query {\n    example: String!\n    users: [User!]!\n  }\n\n  type User {\n    name: String!\n    email: String!\n    comments: [Comment!]!\n  }\n\n  type Comment {\n    body: String!\n  }\n"]);return h=function(){return e},e}var f=Object(l.a)(h()),j=Object(l.a)(d()),O=Object(l.a)(b()),y=function(){var e=Object(a.useState)(f),n=Object(u.a)(e,2),t=n[0],o=n[1],s=Object(a.useState)(j),c=Object(u.a)(s,2),i=c[0],l=c[1],b=Object(a.useState)(O),d=Object(u.a)(b,2),h=d[0],y=d[1],g=Object(a.useState)(""),k=Object(u.a)(g,2),v=k[0],x=k[1];return Object(a.useEffect)((function(){try{var e=(n=window.location.hash.slice(1),JSON.parse(atob(n)));o(e.typeDefs),l(e.query),y(e.mocks)}catch(t){}var n}),[]),Object(a.useEffect)((function(){var e;Object(p.execute)({typeDefs:t,query:i,mocks:h}).then(x),window.location.replace("#"+(e={typeDefs:t,query:i,mocks:h},btoa(JSON.stringify(e))))}),[t,i,h]),Object(r.jsxs)("div",{className:"App-sketchpad",children:[Object(r.jsx)(m.Controlled,{options:{screenReaderLabel:"Schema",mode:"graphql",lineNumbers:!0},value:t,onBeforeChange:function(e,n,t){return o(t)}}),Object(r.jsx)(m.Controlled,{options:{screenReaderLabel:"Query",mode:"graphql",lineNumbers:!0},value:i,onBeforeChange:function(e,n,t){return l(t)}}),Object(r.jsx)(m.Controlled,{options:{screenReaderLabel:"Mocks",mode:"javascript",lineNumbers:!0},value:h,onBeforeChange:function(e,n,t){return y(t)}}),Object(r.jsx)(m.Controlled,{options:{screenReaderLabel:"Result",mode:{name:"javascript",json:!0},lineNumbers:!0,readOnly:!0},value:v,onBeforeChange:function(){return null}})]})};c.a.render(Object(r.jsx)(o.a.StrictMode,{children:Object(r.jsx)(y,{})}),document.getElementById("root"))}},[[27,1,2]]]);
//# sourceMappingURL=main.ebfd2bff.chunk.js.map